[{"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/index.tsx":"1","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/reportWebVitals.ts":"2","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/App.tsx":"3","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Auth.tsx":"4","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Login.tsx":"5","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Register.tsx":"6","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Header.tsx":"7","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/DoorsImages.tsx":"8","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Footer.tsx":"9","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Menu.tsx":"10","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/CreateRequestPost.tsx":"11","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/ViewRequestPosts.tsx":"12","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/HomePage.tsx":"13","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/EditRequestPost.tsx":"14","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/EditVolunteerPost.tsx":"15","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/CreateVolunteerPost.tsx":"16","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/ViewVolunteerPosts.tsx":"17"},{"size":548,"mtime":1612016095498,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1607786181612,"results":"20","hashOfConfig":"19"},{"size":2824,"mtime":1612144537995,"results":"21","hashOfConfig":"19"},{"size":3156,"mtime":1612124926307,"results":"22","hashOfConfig":"19"},{"size":2194,"mtime":1612125758298,"results":"23","hashOfConfig":"19"},{"size":3634,"mtime":1611702048698,"results":"24","hashOfConfig":"19"},{"size":2449,"mtime":1612073351789,"results":"25","hashOfConfig":"19"},{"size":2570,"mtime":1612045927438,"results":"26","hashOfConfig":"19"},{"size":392,"mtime":1612064955468,"results":"27","hashOfConfig":"19"},{"size":3470,"mtime":1612144570363,"results":"28","hashOfConfig":"19"},{"size":8902,"mtime":1612141610817,"results":"29","hashOfConfig":"19"},{"size":8009,"mtime":1612144706635,"results":"30","hashOfConfig":"19"},{"size":980,"mtime":1612121225775,"results":"31","hashOfConfig":"19"},{"size":11079,"mtime":1612143086780,"results":"32","hashOfConfig":"19"},{"size":11031,"mtime":1612143257196,"results":"33","hashOfConfig":"19"},{"size":8903,"mtime":1612142831556,"results":"34","hashOfConfig":"19"},{"size":7761,"mtime":1612144274060,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"ivhg93",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"38"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"38"},"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/index.tsx",[],["82","83"],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/reportWebVitals.ts",[],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/App.tsx",["84"],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Auth.tsx",["85","86","87"],"import React, { Component } from \"react\";\nimport { Button, Container, Col, Row } from 'reactstrap';\n\nimport Login from './Login';\nimport Register from './Register';\n\ntype AuthStates = {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n  zipCode: number;\n  setEmail: (e: any) => any;\n  setPassword: (e: any) => any;\n  setFirstName: (e: any) => any;\n  setLastName: (e: any) => any;\n  setUsername: (e: any) => any;\n  setZipCode: (e: any) => any;\n  sessionToken: any;\n  updateToken: any;\n  getToken: any;\n  register: boolean;\n}\n\nclass Auth extends React.Component<{ updateToken: any }, AuthStates> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      zipCode: 0,\n      sessionToken: \"\",\n      getToken: \"\",\n      updateToken: \"\",\n      register: true,\n      setEmail: (e) => {\n        this.setState({\n          email: e\n        })\n      },\n      setPassword: (e) => {\n        this.setState({\n          password: e\n        })\n      },\n      setFirstName: (e) => {\n        this.setState({\n          firstName: e\n        })\n      },\n      setLastName: (e) => {\n        this.setState({\n          lastName: e\n        })\n      },\n      setUsername: (e) => {\n        this.setState({\n          username: e\n        })\n      },\n      setZipCode: (e) => {\n        this.setState({\n          zipCode: e\n        })\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      <Container className=\"auth-container\">\n    \n          {this.state.register ?\n        \n              <Login\n                email={this.state.email}\n                password={this.state.password}\n                setEmail={this.state.setEmail}\n                setPassword={this.state.setPassword}\n                sessionToken={this.state.sessionToken}\n                updateToken={this.props.updateToken}\n                getToken={this.state.getToken} />\n            :\n              <Register\n                firstName={this.state.firstName}\n                lastName={this.state.lastName}\n                email={this.state.email}\n                username={this.state.username}\n                zipCode={this.state.zipCode}\n                password={this.state.password}\n                setEmail={this.state.setEmail}\n                setPassword={this.state.setPassword}\n                setFirstName={this.state.setFirstName}\n                setLastName={this.state.setLastName}\n                setUsername={this.state.setUsername}\n                setZipCode={this.state.setZipCode}\n                sessionToken={this.state.sessionToken}\n                updateToken={this.props.updateToken}\n                getToken={this.state.getToken} />\n            \n          }\n\n        <br />\n        <Button\n          onClick={() => {\n            this.setState({\n              register: !this.state.register\n            })\n          }}>{this.state.register ?\n            \"Need a login? Click here.\"\n            :\n            \"Already have a login? Click here.\"}\n        </Button>\n        <br /> <br />\n      </Container>\n    );\n  }\n}\n\nexport default Auth;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Login.tsx",["88"],"import React, { Component } from \"react\";\nimport { Form, FormGroup, Input, Button } from 'reactstrap';\nimport {Redirect} from 'react-router-dom';\n\n\ntype LoginAcceptedProps = {\n  email: string;\n  password: string;\n  setEmail: (e: any) => any;\n  setPassword: (e: any) => any;\n  sessionToken: any;\n  updateToken: any;\n  getToken: any;\n}\n\nclass Login extends React.Component<LoginAcceptedProps, {redirect: null | string}> {\n  constructor(props: LoginAcceptedProps) {\n    super(props)\n    this.state = {\n      redirect: null\n    }\n  }\n\n  handleSubmit = (event: any) => {\n    event.preventDefault();\n    fetch(`http://localhost:3000/user/login`, {\n      method: 'POST',\n      body: JSON.stringify({\n        user: {\n          email: this.props.email,\n          password: this.props.password\n        }\n      }),\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    })\n      .then((response) => {\n        if (response.status === 200) {\n          console.log(\"Login successful.\");\n        } else {\n          console.log(\"Login failed.\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        this.props.updateToken(data.sessionToken);\n        this.setState({redirect: '/menu'})\n      })\n  }\n\n  render() {\n    if (this.state.redirect){\n      return <Redirect to = {this.state.redirect} />\n    }\n    return (\n      <div>\n        <h4 className=\"loginHeader\">Login</h4>\n        <Form className=\"login\" onSubmit={this.handleSubmit}>\n          <FormGroup>\n            <div className=\"input-group mb-3\">\n              <Input\n                className=\"email\"\n                placeholder=\"Email\"\n                onChange={(e) =>\n                  this.props.setEmail(e.target.value)}\n                value={this.props.email} />\n            </div>\n          </FormGroup>\n          <FormGroup>\n            <Input\n              className=\"password\"\n              placeholder=\"Password\"\n              onChange={(e) =>\n                this.props.setPassword(e.target.value)}\n              value={this.props.password} />\n          </FormGroup>\n          <Button type=\"submit\">Login</Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default (Login);","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Register.tsx",["89"],"import React, { Component } from 'react';\nimport { Container, Form, FormGroup, Input, Button } from 'reactstrap';\nimport { Redirect } from 'react-router-dom';\n\ntype RegisterAcceptedProps = {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n  zipCode: number;\n  setEmail: (e: any) => any;\n  setPassword: (e: any) => any;\n  setFirstName: (e: any) => any;\n  setLastName: (e: any) => any;\n  setUsername: (e: any) => any;\n  setZipCode: (e: any) => any;\n  sessionToken: any;\n  updateToken: any;\n  getToken: any;\n}\n\n\nclass Register extends React.Component<RegisterAcceptedProps, { redirect: null | string }> {\n  constructor(props: RegisterAcceptedProps) {\n    super(props)\n    this.state = {\n      redirect: null\n    }\n  }\n\n  handleSubmit = (event: any) => {\n    event.preventDefault();\n    fetch(`http://localhost:3000/user/register`, {\n      method: 'POST',\n      body: JSON.stringify({\n        user: {\n          firstName: this.props.firstName,\n          lastName: this.props.lastName,\n          username: this.props.username,\n          zipCode: this.props.zipCode,\n          email: this.props.email,\n          password: this.props.password\n        }\n      }),\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    })\n      .then((response) => {\n        if (response.status === 200) {\n          console.log(\"Registration successful.\");\n        } else {\n          console.log(\"Registration failed.\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        this.props.updateToken(data.sessionToken);\n        this.setState({ redirect: '/menu' })\n      })\n  }\n\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to={this.state.redirect} />\n    }\n    return (\n      <Container>\n        <h4 className=\"registerHeader\">Register</h4>\n        <Form className=\"register\" onSubmit={this.handleSubmit}>\n          <FormGroup>\n            <Input\n              className=\"firstName\"\n              placeholder=\"First Name\"\n              onChange={(e) =>\n                this.props.setFirstName(e.target.value)}\n              value={this.props.firstName} />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              className=\"lastName\"\n              placeholder=\"Last Name\"\n              onChange={(e) =>\n                this.props.setLastName(e.target.value)}\n              value={this.props.lastName} />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              className=\"username\"\n              placeholder=\"Username\"\n              onChange={(e) =>\n                this.props.setUsername(e.target.value)}\n              value={this.props.username} />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              className=\"zipCode\"\n              placeholder=\"Zip Code\"\n              onChange={(e) =>\n                this.props.setZipCode(e.target.value)}\n              value={this.props.zipCode} />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              className=\"email\"\n              placeholder=\"Email\"\n              onChange={(e) =>\n                this.props.setEmail(e.target.value)}\n              value={this.props.email} />\n          </FormGroup>\n          <FormGroup>\n            <Input\n              className=\"password\"\n              placeholder=\"Password\"\n              onChange={(e) =>\n                this.props.setPassword(e.target.value)}\n              value={this.props.password} />\n          </FormGroup>\n          <Button type=\"submit\">Register</Button>\n        </Form>\n      </Container>\n    );\n  }\n}\n\nexport default Register;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Header.tsx",["90"],"import React, { Component } from 'react';\nimport { Button, Col, Collapse, Navbar, NavbarToggler, Nav, NavItem, NavLink } from 'reactstrap';\n\nimport platinum_rule_logo from '../../assets/platinum_rule_logo.png'\n\n\ntype HeaderProps = {\n    clearToken: any;\n    sessionToken: any;\n}\n\ntype HeaderStates = {\n    isOpen: boolean;\n}\n\nclass Header extends React.Component<HeaderProps, HeaderStates> {\n    constructor(props: HeaderProps) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            isOpen: false,\n        };\n    }\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar id=\"header\" className=\"navbar navbar-light\" background-color=\"#D1DADC\">\n\n                    <img src={platinum_rule_logo}\n                        alt=\"logo\"\n                        className=\"logo\" />\n\n                    <NavbarToggler id=\"hamburger\" onClick={this.toggle} />\n\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav navbar>\n                            <Col className=\"navbarColumn\">\n                                <NavItem>\n                                    <NavLink href='/menu'>Menu</NavLink>\n                                    <NavLink href='/menu/request/posts'>View Help Requests</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink href='/menu/volunteer/create'>Create a Volunteer Post</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink href='/menu/volunteer/posts'>View Volunteer Posts</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink href='/menu/request/create'>Create a Help Request</NavLink>\n                                </NavItem>\n                                <br />\n                                <NavItem>\n                                    <Button onClick={this.props.clearToken}>Logout</Button>\n                                </NavItem>\n                                <br />\n                            </Col>\n                        </Nav>\n                    </Collapse>\n\n                </Navbar>\n            </div>\n        )\n    }\n}\nexport default Header;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/DoorsImages.tsx",["91"],"import React, { Component } from 'react';\nimport { UncontrolledCarousel } from 'reactstrap';\n\nimport doors1 from '../../assets/doors1.jpg';\nimport doors2 from '../../assets/doors2.jpg';\nimport doors3 from '../../assets/doors3.jpg';\nimport doors4 from '../../assets/doors4.jpg';\nimport doors5 from '../../assets/doors5.jpg';\nimport doors6 from '../../assets/doors6.jpg';\nimport doors7 from '../../assets/doors7.jpg';\nimport doors8 from '../../assets/doors8.jpg';\nimport doors9 from '../../assets/doors9.jpg';\nimport doors10 from '../../assets/doors10.jpg';\n\nclass DoorsImages extends React.Component {\n\n    render() {\n        const items = [\n            {\n                src: `${doors1}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors2}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors3}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors4}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors5}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors6}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors7}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors8}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors9}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors10}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            }\n        ]\n        return (\n            <div>\n                <UncontrolledCarousel\n                    items={items}\n                    indicators={false}\n                    autoPlay={true}\n                    controls={false}\n                    interval={3000}\n                />\n            </div>\n        )\n    }\n}\n\nexport default DoorsImages;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Footer.tsx",[],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Menu.tsx",["92"],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/CreateRequestPost.tsx",["93"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Card, CardHeader, Container, Form, FormGroup, Input, Label, Row } from 'reactstrap';\n\ntype RequestProps = {\n    sessionToken?: any;\n    userId: any;\n    isCurrentUser: boolean;\n}\n\nexport type Weekdays = \"Sundays\" | \"Mondays\" | \"Tuesdays\" | \"Wednesdays\" | \"Thursdays\" | \"Fridays\" | \"Saturdays\"\n\nexport type NewAvail = Record<Weekdays, boolean> // Type of object with keys drawn from weekdays and value of boolean\n\ntype RequestState = {\n    title: string;\n    description: string;\n    availability: NewAvail;\n    instances: number;\n    date: any;\n    inactiveDate: any;\n    setTitle: (e: any) => void;\n    setDescription: (e: any) => void;\n    setAvailability: (e: any) => void;\n    setInstances: (e: any) => void;\n    setDate: (e: any) => void;\n    setInactiveDate: (e: any) => void;\n}\n\nclass CreateRequestPost extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n        this.state = {\n            title: \"\",\n            description: \"\",\n            instances: 0,\n            date: \" \",\n            inactiveDate: \" \",\n            setTitle: (e) => {\n                this.setState({\n                    title: e\n                })\n            },\n            setDescription: (e) => {\n                this.setState({\n                    description: e\n                })\n            },\n            setAvailability: (e) => {\n                this.setState({\n                    availability: e\n                })\n            },\n            setInstances: (e) => {\n                this.setState({\n                    instances: e\n                })\n            },\n            setDate: (e) => {\n                this.setState({\n                    date: e\n                })\n            },\n            setInactiveDate: (e) => {\n                this.setState({\n                    inactiveDate: e\n                })\n            },\n            availability: {\n                Sundays: false,\n                Mondays: false,\n                Tuesdays: false,\n                Wednesdays: false,\n                Thursdays: false,\n                Fridays: false,\n                Saturdays: false\n            },\n        }\n        this.updateAvailability = this.updateAvailability.bind(this)\n    }\n\n    updateAvailability(newAvail: NewAvail) {\n        this.setState({\n            availability: {\n                ...this.state.availability,\n                ...newAvail\n            }\n        })\n    }\n\n\n    handleSubmit = (event: any) => {\n        event.preventDefault();\n        fetch(`http://localhost:3000/recipient/create`, {\n            method: 'POST',\n            body: JSON.stringify({\n                recipient: {\n                    title: this.state.title,\n                    description: this.state.description,\n                    availability: this.state.availability,\n                    instances: this.state.instances,\n                    date: this.state.date, //Fix date format\n                    inactiveDate: this.state.inactiveDate,\n                }\n            }),\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data);\n                this.state.setTitle('');\n                this.state.setDescription('');\n                this.state.setAvailability('');\n                this.state.setInstances('');\n                this.state.setDate('');\n                this.state.setInactiveDate('');\n            })\n    }\n\n    componentDidMount() {\n        if (!this.props.sessionToken) {\n            return <Redirect to=\"/menu\" />\n        } else {\n            return <Redirect to=\"/request/create\" />\n        }\n    }\n\n\n    render() {\n        return (\n            <Container className=\"postContainer\">\n                <Card body inverse\n                    style={{\n                        backgroundColor: '#96A7AA',\n                        borderColor: '#646F71',\n                        borderWidth: '.25em'\n                    }}>\n                    <CardHeader\n                        style={{\n                            backgroundColor: '#646F71'\n                        }}>\n                        <h4 className=\"postHeader\">\n                            What do you need help with?\n                        </h4>\n                    </CardHeader>\n                    <br />\n                    <Form className='postForm' onSubmit={this.handleSubmit}>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"helpTitle\"\n                                className=\"helpTitle\">\n                                <p className=\"cardText\">Please select a task:</p>\n                            </Label>\n                            <Input\n                                className=\"helpTitle\"\n                                type=\"select\"\n                                onChange={(e) => { this.state.setTitle(e.target.value) }}\n                                value={this.state.title}>\n                                <option value=\"\">Select One</option>\n                                <option value=\"Raking Leaves\">Raking Leaves</option>\n                                <option value=\"Shoveling Snow\">Shoveling Snow</option>\n                                <option value=\"Take Out Trash\">Taking Out Trash</option>\n                                <option value=\"Mow Lawn\">Mowing a Lawn</option>\n                                <option value=\"Walk Dogs\">Walking Dog/s</option>\n                                <option value=\"Grocery Run\">A Grocery Run</option>\n                                <option value=\"Pharmacy Pickup\">A Pharmacy Pickup</option>\n                                <option value=\"Essential Errand\">An Essential Errand</option>\n                                <option value=\"Phone Check-ins\">Phone Check-ins</option>\n                                <option value=\"Other\">Other - Please list in description.</option>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"description\"\n                                className=\"helpDescription\">\n                                <p className=\"cardText\">Description:</p>\n                            </Label>\n                            <Input\n                                className=\"helpDescription\"\n                                type=\"textarea\"\n                                onChange={(e) => { this.state.setDescription(e.target.value) }}\n                                value={this.state.description}>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"availability\"\n                                className=\"availability\">\n                                <p className=\"cardText\">Availability:</p>\n                            </Label>\n                            <br />\n                            <Row> \n                            {Object.entries(this.state.availability).map(([day, value], i: number) => (\n                                <li className=\"availabilityList\">\n                                    <Input type=\"checkbox\" key={i}\n                                        checked={value}\n                                        // @ts-ignore\n                                        onChange={() => this.updateAvailability({ [day]: !value })}\n                                    // value={value}\n                                    />\n                                    {day}\n                                </li>\n                            ))\n                            }\n                            </Row>\n                        </FormGroup>\n                        <FormGroup>\n                            <Row className=\"instancesRow\">\n                                <Label\n                                    htmlFor=\"instances\">\n                                    <p className=\"cardText\">Instances:</p>\n                                </Label>\n                                <Input\n                                    id=\"instances\"\n                                    onChange={(e) => { this.state.setInstances(e.target.value) }}\n                                    value={this.state.instances} />\n                            </Row>\n                        </FormGroup>\n\n                        <Button type=\"submit\" className=\"recipientSubmitButton\">Submit Post</Button>\n                    </Form>\n                </Card>\n            </Container>\n        )\n    }\n}\n\nexport default CreateRequestPost;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/ViewRequestPosts.tsx",["94"],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/HomePage.tsx",["95","96"],"import React, { Component } from 'react';\nimport { Col, Container, Row } from 'reactstrap';\n\nimport DoorsImages from './DoorsImages';\nimport Auth from '../auth/Auth';\n\nclass HomePage extends React.Component<{ updateToken: any }, {}> {\n\n  render() {\n    return (\n      <div>\n\n        <Col className=\"platinum\">\n          <br />\n          <Row id=\"platinum\">\n            <h1 className=\"welcome\">WELCOME TO</h1>\n          </Row>\n          <Row id=\"platinum\">\n            <h1 className=\"welcome\">THE PLATINUM RULE</h1>\n          </Row>\n          <Row id=\"platinum\">\n            <h2 className=\"helpful\">A helpful place for neighbors.</h2>\n          </Row>\n          <br />\n        </Col>\n\n        <Row className=\"dustyBlue\">\n          <br /><br />\n        </Row>\n\n        <DoorsImages />\n\n        <Row className=\"dustyBlue\">\n          <br /><br />\n        </Row>\n        <br />\n\n        <Auth updateToken={this.props.updateToken} />\n\n      </div>\n    );\n  }\n}\n\nexport default HomePage;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/EditRequestPost.tsx",["97"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Card, CardHeader, Container, Form, FormGroup, Input, Label, Modal, ModalBody, Row } from 'reactstrap';\n\ntype EditRequestProps = {\n    sessionToken?: any;\n    userId: any;\n    recipientId: number;\n    closeModal: () => void;\n    fetchRequestPosts: () => void;\n}\n\nexport type Weekdays = \"Sundays\" | \"Mondays\" | \"Tuesdays\" | \"Wednesdays\" | \"Thursdays\" | \"Fridays\" | \"Saturdays\"\n\nexport type NewAvail = Record<Weekdays, boolean>\n\ntype EditRequestState = {\n    title: string;\n    description: string;\n    availability: NewAvail;\n    instances: number;\n    date: any;\n    inactiveDate: any;\n    setTitle: (e: any) => void;\n    setDescription: (e: any) => void;\n    setAvailability: (e: any) => void;\n    setInstances: (e: any) => void;\n    setDate: (e: any) => void;\n    setInactiveDate: (e: any) => void;\n    modal: boolean,\n    updateActive: boolean;\n    setUpdateActive: (e: any) => void;\n}\n\n\nclass EditRequestPost extends React.Component<EditRequestProps, EditRequestState> {\n    constructor(props: EditRequestProps) {\n        super(props);\n        this.state = {\n            modal: false,\n            updateActive: false,\n            setUpdateActive: (e) => {\n                this.setState({\n                    updateActive: e\n                })\n            },\n            title: \"\",\n            description: \"\",\n            availability: {\n                Sundays: false,\n                Mondays: false,\n                Tuesdays: false,\n                Wednesdays: false,\n                Thursdays: false,\n                Fridays: false,\n                Saturdays: false\n            },\n            instances: 0,\n            date: \" \",\n            inactiveDate: \" \",\n            setTitle: (e) => {\n                this.setState({\n                    title: e\n                })\n            },\n            setDescription: (e) => {\n                this.setState({\n                    description: e\n                })\n            },\n            setAvailability: (e) => {\n                this.setState({\n                    availability: e\n                })\n            },\n            setInstances: (e) => {\n                this.setState({\n                    instances: e\n                })\n            },\n            setDate: (e) => {\n                this.setState({\n                    date: e\n                })\n            },\n            setInactiveDate: (e) => {\n                this.setState({\n                    inactiveDate: e\n                })\n            },\n        }\n        this.updateAvailability = this.updateAvailability.bind(this)\n    }\n\n    updateAvailability(newAvail: NewAvail) {\n        this.setState({\n            availability: {\n                ...this.state.availability,\n                ...newAvail\n            }\n        })\n    }\n\n    handleSubmit = (event: any) => {\n        event.preventDefault();\n        fetch(`http://localhost:3000/recipient/${this.props.recipientId}`, {\n            method: 'PUT',\n            body: JSON.stringify({\n                recipient: {\n                    title: this.state.title,\n                    description: this.state.description,\n                    availability: this.state.availability,\n                    instances: this.state.instances,\n                    date: this.state.date, // Fix date formatting\n                    inactiveDate: this.state.inactiveDate,\n                }\n            }),\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then((response) => {\n                if (response.status === 200) {\n                    console.log('Update successful.');\n                    this.state.setUpdateActive(true);\n                    console.log(response);\n                } else {\n                    console.log('Update failed.')\n                    console.log(this.props.userId)\n                }\n                return response.json();\n            }).then((data) => {\n                console.log(data);\n                this.props.closeModal();\n                this.props.fetchRequestPosts();\n            })\n    };\n\n    componentDidMount() {\n        if (!this.props.sessionToken) {\n            return <Redirect to=\"/menu\" />\n        } else {\n            return <Redirect to=\"/request/posts\" />\n        }\n    }\n\n    render() {\n\n        return (\n            <Modal isOpen={true}>\n                <ModalBody>\n                    <Container className=\"postContainer\">\n                        <Card\n                            body inverse style={{\n                                backgroundColor: '#96A7AA',\n                                borderColor: '#646F71',\n                                borderWidth: '.25em'\n                            }}>\n                            <CardHeader\n                                style={{\n                                    backgroundColor: '#646F71'\n                                }}>\n                                <h4 className=\"postHeader\">\n                                    Update Your Help Request\n                                </h4>\n                            </CardHeader>\n                            <br />\n                            <Form className='postForm' onSubmit={this.handleSubmit} >\n                                <FormGroup>\n                                    <Label\n                                        htmlFor=\"helpTitle\"\n                                        className=\"helpTitle\">\n                                        <p className=\"cardText\">Please select a task:</p>\n                                    </Label>\n                                    <Input\n                                        className=\"helpTitle\"\n                                        type=\"select\"\n                                        onChange={(e) => { this.state.setTitle(e.target.value) }}\n                                        value={this.state.title}>\n                                        <option value=\"\">Select One</option>\n                                        <option value=\"Raking Leaves\">Raking Leaves</option>\n                                        <option value=\"Shoveling Snow\">Shoveling Snow</option>\n                                        <option value=\"Take Out Trash\">Taking Out Trash</option>\n                                        <option value=\"Mow Lawn\">Mowing a Lawn</option>\n                                        <option value=\"Walk Dogs\">Walking Dog/s</option>\n                                        <option value=\"Grocery Run\">A Grocery Run</option>\n                                        <option value=\"Pharmacy Pickup\">A Pharmacy Pickup</option>\n                                        <option value=\"Essential Errand\">An Essential Errand</option>\n                                        <option value=\"Phone Check-ins\">Phone Check-ins</option>\n                                        <option value=\"Other\">Other - Please list in description.</option>\n                                    </Input>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label\n                                        htmlFor=\"description\"\n                                        className=\"helpDescription\">\n                                        <p className=\"cardText\">Description:</p>\n                                    </Label>\n                                    <Input\n                                        className=\"helpDescription\"\n                                        type=\"textarea\"\n                                        onChange={(e) => { this.state.setDescription(e.target.value) }}\n                                        value={this.state.description}>\n                                    </Input>\n                                </FormGroup>\n                                <FormGroup>\n\n                                    <Label\n                                        htmlFor=\"availability\"\n                                        className=\"availability\">\n                                        <p className=\"cardText\">Availability:</p>\n                                    </Label>\n                                    <br />\n                                    <Row>\n                                        {Object.entries(this.state.availability).map(([day, value], i: number) => (\n                                            <li className=\"availabilityList\">\n                                                <Input type=\"checkbox\" key={i}\n                                                    checked={value}\n                                                    // @ts-ignore\n                                                    onChange={() => this.updateAvailability({ [day]: !value })}\n                                                // value={value}\n                                                />\n                                                {day}\n                                            </li>\n                                        ))\n                                        }\n                                    </Row>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Row className=\"instancesRow\">\n                                        <Label\n                                            htmlFor=\"instances\">\n                                            <p className=\"cardText\">Instances:</p>\n                                        </Label>\n                                        <Input\n                                            id=\"instances\"\n                                            onChange={(e) => { this.state.setInstances(e.target.value) }}\n                                            value={this.state.instances} />\n                                    </Row>\n                                </FormGroup>\n                                \n                                <Container>\n                                    <Row className=\"updateButtons\">\n                                        <Button\n                                            type=\"button\"\n                                            onClick={this.props.closeModal}\n                                            id=\"recipientCancelButton\">\n                                            Cancel\n                                        </Button>\n                                        <Button\n                                            type=\"submit\"\n                                            id=\"recipientUpdateButton\">\n                                            Update\n                                        </Button>\n                                    </Row>\n                                </Container>\n                            </Form>\n                        </Card>\n                    </Container>\n                </ModalBody>\n            </Modal>\n        );\n    }\n}\n\n\nexport default EditRequestPost;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/EditVolunteerPost.tsx",["98"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Card, CardHeader, Container, Form, FormGroup, Input, Label, Modal, ModalBody, Row } from 'reactstrap';\n\ntype EditVolunteerProps = {\n    sessionToken?: any;\n    userId: any;\n    helpId: any;\n    closeModal: () => void;\n    fetchHelpPosts: () => void;\n}\n\nexport type Weekdays = \"Sundays\" | \"Mondays\" | \"Tuesdays\" | \"Wednesdays\" | \"Thursdays\" | \"Fridays\" | \"Saturdays\"\n\nexport type NewAvail = Record<Weekdays, boolean>\n\ntype EditVolunteerState = {\n    title: string;\n    description: string;\n    availability: NewAvail;\n    instances: number;\n    date: any;\n    inactiveDate: any;\n    setTitle: (e: any) => void;\n    setDescription: (e: any) => void;\n    setAvailability: (e: any) => void;\n    setInstances: (e: any) => void;\n    setDate: (e: any) => void;\n    setInactiveDate: (e: any) => void;\n    modal: boolean,\n    updateActive: boolean;\n    setUpdateActive: (e: any) => void;\n}\n\nclass EditVolunteerPost extends React.Component<EditVolunteerProps, EditVolunteerState> {\n    constructor(props: EditVolunteerProps) {\n        super(props);\n        this.state = {\n            modal: false,\n            updateActive: false,\n            setUpdateActive: (e) => {\n                this.setState({\n                    updateActive: e\n                })\n            },\n            title: \"\",\n            description: \"\",\n            availability: {\n                Sundays: false,\n                Mondays: false,\n                Tuesdays: false,\n                Wednesdays: false,\n                Thursdays: false,\n                Fridays: false,\n                Saturdays: false\n            },\n            instances: 0,\n            date: \" \",\n            inactiveDate: \" \",\n            setTitle: (e) => {\n                this.setState({\n                    title: e\n                })\n            },\n            setDescription: (e) => {\n                this.setState({\n                    description: e\n                })\n            },\n            setAvailability: (e) => {\n                this.setState({\n                    availability: e\n                })\n            },\n            setInstances: (e) => {\n                this.setState({\n                    instances: e\n                })\n            },\n            setDate: (e) => {\n                this.setState({\n                    date: e\n                })\n            },\n            setInactiveDate: (e) => {\n                this.setState({\n                    inactiveDate: e\n                })\n            },\n        }\n        this.updateAvailability = this.updateAvailability.bind(this)\n    }\n\n\n    updateAvailability(newAvail: NewAvail) {\n        this.setState({\n            availability: {\n                ...this.state.availability,\n                ...newAvail\n            }\n        })\n    }\n\n    handleSubmit = (event: any) => {\n        event.preventDefault();\n        fetch(`http://localhost:3000/help/${this.props.helpId}`, {\n            method: 'PUT',\n            body: JSON.stringify({\n                help: {\n                    title: this.state.title,\n                    description: this.state.description,\n                    availability: this.state.availability,\n                    instances: this.state.instances,\n                    date: this.state.date, // Fix date formatting\n                    inactiveDate: this.state.inactiveDate,\n                }\n            }),\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then((response) => {\n                if (response.status === 200) {\n                    console.log('Update successful.');\n                    this.state.setUpdateActive(true);\n                    console.log(response);\n                } else {\n                    console.log('Update failed.')\n                    console.log(this.props.userId)\n                }\n                return response.json();\n            }).then((data) => {\n                console.log(data);\n                this.props.closeModal();\n                this.props.fetchHelpPosts();\n            })\n    };\n\n    componentDidMount() {\n        if (!this.props.sessionToken) {\n            return <Redirect to=\"/menu\" />\n        } else {\n            return <Redirect to=\"/volunteer/posts\" />\n        }\n    }\n\n\n    render() {\n        return (\n\n            <Modal isOpen={true}>\n                <ModalBody>\n                    <Container className=\"postContainer\">\n                        <Card body inverse\n                            style={{\n                                backgroundColor: '#AA9996',\n                                borderColor: '#716664',\n                                borderWidth: '.25em'\n                            }}>\n                            <CardHeader\n                                style={{\n                                    backgroundColor: '#716664'\n                                }}>\n                                <h4 className=\"postHeader\">\n                                    Update Your Volunteer Post\n                                </h4>\n                            </CardHeader>\n                            <br />\n                            <Form className='postForm' onSubmit={this.handleSubmit}>\n                                <FormGroup>\n                                    <Label\n                                        htmlFor=\"helpTitle\"\n                                        className=\"helpTitle\">\n                                        <p className=\"cardText\">Please select a task:</p>\n                                    </Label>\n                                    <Input\n                                        className=\"helpTitle\"\n                                        type=\"select\"\n                                        onChange={(e) => { this.state.setTitle(e.target.value) }}\n                                        value={this.state.title}>\n                                        <option value=\"\">Select One</option>\n                                        <option value=\"Raking Leaves\">Raking Leaves</option>\n                                        <option value=\"Shoveling Snow\">Shoveling Snow</option>\n                                        <option value=\"Take Out Trash\">Taking Out Trash</option>\n                                        <option value=\"Mow Lawn\">Mowing a Lawn</option>\n                                        <option value=\"Walk Dogs\">Walking Dog/s</option>\n                                        <option value=\"Grocery Run\">A Grocery Run</option>\n                                        <option value=\"Pharmacy Pickup\">A Pharmacy Pickup</option>\n                                        <option value=\"Essential Errand\">An Essential Errand</option>\n                                        <option value=\"Phone Check-ins\">Phone Check-ins</option>\n                                        <option value=\"Other\">Other - Please list in description.</option>\n                                    </Input>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label\n                                        htmlFor=\"description\"\n                                        className=\"helpDescription\">\n                                        <p className=\"cardText\">Description:</p>\n                                    </Label>\n                                    <Input\n                                        className=\"helpDescription\"\n                                        type=\"textarea\"\n                                        onChange={(e) => { this.state.setDescription(e.target.value) }}\n                                        value={this.state.description}>\n                                    </Input>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label\n                                        htmlFor=\"availability\"\n                                        className=\"availability\">\n                                        <p className=\"cardText\">Availability:</p>\n                                    </Label>\n                                    <br />\n                                    <Row>\n                                        {Object.entries(this.state.availability).map(([day, value], i: number) => (\n                                            <li className=\"availabilityList\">\n                                                <Input type=\"checkbox\" key={i}\n                                                    checked={value}\n                                                    // @ts-ignore\n                                                    onChange={() => this.updateAvailability({ [day]: !value })}\n                                                // value={value}\n                                                />\n                                                {day}\n                                            </li>\n                                        ))\n                                        }\n                                    </Row>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Row className=\"instancesRow\">\n                                        <Label\n                                            htmlFor=\"instances\">\n                                            <p className=\"cardText\">Instances:</p>\n                                        </Label>\n                                        <Input\n                                            id=\"instances\"\n                                            onChange={(e) => { this.state.setInstances(e.target.value) }}\n                                            value={this.state.instances} />\n                                    </Row>\n                                </FormGroup>\n\n                                <Container>\n                                    <Row className=\"updateButtons\">\n                                        <Button\n                                            type=\"button\"\n                                            onClick={this.props.closeModal}\n                                            id=\"volunteerCancelButton\">\n                                            Cancel\n                                        </Button>\n                                        <Button\n                                            type=\"submit\"\n                                            id=\"volunteerSubmitButton\">\n                                            Update\n                                    </Button>\n                                    </Row>\n                                </Container>\n                            </Form>\n                        </Card>\n                    </Container>\n                </ModalBody>\n            </Modal>\n        );\n    }\n}\n\n\nexport default EditVolunteerPost;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/CreateVolunteerPost.tsx",["99"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Card, CardHeader, Container, Form, FormGroup, Input, Label, Row } from 'reactstrap';\n\ntype VolunteerProps = {\n    sessionToken?: any;\n    userId: any;\n    isCurrentUser: boolean;\n}\n\nexport type Weekdays = \"Sundays\" | \"Mondays\" | \"Tuesdays\" | \"Wednesdays\" | \"Thursdays\" | \"Fridays\" | \"Saturdays\"\n\nexport type NewAvail = Record<Weekdays, boolean> // Type of object with keys drawn from weekdays and value of boolean\n\ntype VolunteerState = {\n    title: string;\n    description: string;\n    availability: NewAvail;\n    instances: number;\n    date: any;\n    inactiveDate: any;\n    setTitle: (e: any) => void;\n    setDescription: (e: any) => void;\n    setAvailability: (e: any) => void;\n    setInstances: (e: any) => void;\n    setDate: (e: any) => void;\n    setInactiveDate: (e: any) => void;\n}\n\nclass CreateVolunteerPost extends React.Component<VolunteerProps, VolunteerState> {\n    constructor(props: VolunteerProps) {\n        super(props)\n        this.state = {\n            title: \"\",\n            description: \"\",\n            instances: 0,\n            date: \" \",\n            inactiveDate: \" \",\n            setTitle: (e) => {\n                this.setState({\n                    title: e\n                })\n            },\n            setDescription: (e) => {\n                this.setState({\n                    description: e\n                })\n            },\n            setAvailability: (e) => {\n                this.setState({\n                    availability: e\n                })\n            },\n            setInstances: (e) => {\n                this.setState({\n                    instances: e\n                })\n            },\n            setDate: (e) => {\n                this.setState({\n                    date: e\n                })\n            },\n            setInactiveDate: (e) => {\n                this.setState({\n                    inactiveDate: e\n                })\n            },\n            availability: {\n                Sundays: false,\n                Mondays: false,\n                Tuesdays: false,\n                Wednesdays: false,\n                Thursdays: false,\n                Fridays: false,\n                Saturdays: false\n            }\n        }\n        this.updateAvailability = this.updateAvailability.bind(this)\n    }\n\n    updateAvailability(newAvail: NewAvail) {\n        this.setState({\n            availability: {\n                ...this.state.availability,\n                ...newAvail\n            }\n        })\n    }\n\n    handleSubmit = (event: any) => {\n        event.preventDefault();\n        fetch(`http://localhost:3000/help/create`, {\n            method: 'POST',\n            body: JSON.stringify({\n                help: {\n                    title: this.state.title,\n                    description: this.state.description,\n                    availability: this.state.availability,\n                    instances: this.state.instances,\n                    date: this.state.date, // Fix date format\n                    inactiveDate: this.state.inactiveDate,\n                }\n            }),\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data);\n                this.state.setTitle('');\n                this.state.setDescription('');\n                this.state.setAvailability('');\n                this.state.setInstances('');\n                this.state.setInactiveDate('');\n            })\n    }\n\n    componentDidMount() {\n        if (!this.props.sessionToken) {\n            return <Redirect to=\"/menu\" />\n        } else {\n            return <Redirect to=\"/volunteer/create\" />\n        }\n    }\n\n    render() {\n        return (\n            <Container className=\"postContainer\">\n                <Card body inverse\n                    style={{\n                        backgroundColor: '#AA9996',\n                        borderColor: '#716664',\n                        borderWidth: '.25em'\n                    }}>\n                    <CardHeader\n                        style={{\n                            backgroundColor: '#716664'\n                        }}>\n                        <h4 className=\"postHeader\">\n                            How can you help?\n                        </h4>\n                    </CardHeader>\n                    <br />\n                    <Form className=\"postForm\" onSubmit={this.handleSubmit}>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"helpTitle\"\n                                className=\"helpTitle\">\n                                <p className=\"cardText\">Please select a task:</p>\n                            </Label>\n                            <Input\n                                className=\"helpTitle\"\n                                type=\"select\"\n                                onChange={(e) => { this.state.setTitle(e.target.value) }}\n                                value={this.state.title}>\n                                <option value=\"\">Select One</option>\n                                <option value=\"Raking Leaves\">Raking Leaves</option>\n                                <option value=\"Shoveling Snow\">Shoveling Snow</option>\n                                <option value=\"Take Out Trash\">Taking Out Trash</option>\n                                <option value=\"Mow Lawn\">Mowing a Lawn</option>\n                                <option value=\"Walk Dogs\">Walking Dog/s</option>\n                                <option value=\"Grocery Run\">A Grocery Run</option>\n                                <option value=\"Pharmacy Pickup\">A Pharmacy Pickup</option>\n                                <option value=\"Essential Errand\">An Essential Errand</option>\n                                <option value=\"Phone Check-ins\">Phone Check-ins</option>\n                                <option value=\"Other\">Other - Please list in description.</option>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"description\"\n                                className=\"helpDescription\">\n                                <p className=\"cardText\">Description:</p>\n                            </Label>\n                            <Input\n                                className=\"helpDescription\"\n                                type=\"textarea\"\n                                onChange={(e) => { this.state.setDescription(e.target.value) }}\n                                value={this.state.description}>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"availability\"\n                                className=\"availability\">\n                                <p className=\"cardText\">Availability:</p>\n                            </Label>\n                            <br />\n                            <Row>\n                                {Object.entries(this.state.availability).map(([day, value], i: number) => (\n                                    <li className=\"availabilityList\">\n                                        <Input type=\"checkbox\" key={i}\n                                            checked={value}\n                                            // @ts-ignore\n                                            onChange={() => this.updateAvailability({ [day]: !value })}\n                                        // value={value}\n                                        />\n                                        {day}\n                                    </li>\n                                ))\n                                }\n                            </Row>\n                        </FormGroup>\n                        <FormGroup>\n                            <Row className=\"instancesRow\">\n                                <Label\n                                    htmlFor=\"instances\">\n                                    <p className=\"cardText\">Instances:</p>\n                                </Label>\n                                <Input\n                                    id=\"instances\"\n                                    onChange={(e) => { this.state.setInstances(e.target.value) }}\n                                    value={this.state.instances} />\n                            </Row>\n                        </FormGroup>\n                        <Button type=\"submit\" className=\"volunteerSubmitButton\">Submit Post</Button>\n                    </Form>\n                </Card>\n            </Container>\n        );\n    }\n}\n\nexport default CreateVolunteerPost;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/ViewVolunteerPosts.tsx",["100"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Card, CardHeader, CardText, Container, Modal, Row } from 'reactstrap';\n\nimport EditHelpPost from './EditVolunteerPost';\n\ntype ViewHelpPostsProps = {\n    sessionToken?: any;\n    userId: any;\n    isCurrentUser: boolean;\n}\n\ntype ViewHelpPostsState = {\n    helpPosts: any;\n    helpId: number;\n    currentUser: boolean;\n    modal: boolean;\n    openModal: boolean;\n    updateActive: boolean;\n    setUpdateActive: (e: any) => void;\n}\n\nclass ViewHelpPosts extends React.Component<ViewHelpPostsProps, ViewHelpPostsState> {\n    constructor(props: ViewHelpPostsProps) {\n        super(props)\n        this.state = {\n            helpPosts: [],\n            helpId: 0,\n            currentUser: false,\n            modal: false,\n            openModal: false,\n            updateActive: false,\n            setUpdateActive: (e) => {\n                this.setState({\n                    updateActive: e\n                })\n            },\n        };\n        this.fetchHelpPosts = this.fetchHelpPosts.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchHelpPosts();\n        if (!this.props.sessionToken) {\n            return <Redirect to=\"/\" />\n        } else {\n            return <Redirect to=\"/menu\" />\n        }\n    }\n\n    setHelpPosts = (postArray: any) => {\n        console.log(\"postArray: \", postArray)\n        this.setState({ helpPosts: postArray })\n    }\n\n    fetchHelpPosts = () => {\n        fetch(`http://localhost:3000/help`, {\n            method: 'GET',\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then(response => response.json())\n            .then((data) => {\n                this.setHelpPosts(data)\n            })\n    }\n\n    deletePost = (event: any) => {\n        fetch(`http://localhost:3000/help/${this.state.helpId}`, {\n            method: 'DELETE',\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then(response => response.json());\n        console.log('Post successfully deleted.');\n        this.fetchHelpPosts();\n    }\n\n    openModal = () => {\n        this.setState({ openModal: true })\n    }\n\n    closeModal = () => {\n        this.setState({ openModal: false })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"viewPostsHeader\"> \n                <h4 className=\"viewVolunteerHeader\">Find Volunteers</h4>\n                </div>\n                \n                <div>\n                    {this.state.helpPosts.length > 0 ? (this.state.helpPosts.map((event: any, index: any) => (\n\n                        <Container key={this.state.helpPosts.id} className=\"serviceCard\">\n\n                            <Card\n                                onMouseEnter={e => {\n                                    this.setState({\n                                        helpId: event.id\n                                    })\n                                    console.log(this.state.helpId)\n                                }}\n                                body inverse\n                                style={{\n                                    backgroundColor: '#96A7AA',\n                                    borderColor: '#646F71',\n                                    borderWidth: '.25em'\n                                }}>\n\n                                <CardHeader\n                                    style={{\n                                        backgroundColor: '#646F71'\n                                    }}>\n                                    <p className=\"cardText\">Your neighbor</p>\n                                    <p className=\"cardUsername\">{this.state.helpPosts[index].user.username}</p>\n                                    <p className=\"cardText\">is available to help with</p>\n                                    <p className=\"cardHelpType\">{this.state.helpPosts[index].title}</p>\n                                </CardHeader>\n                                <br />\n                                <CardText>\n                                    <p className=\"cardText\">Description:</p>\n                                    <p className=\"cardText\">{this.state.helpPosts[index].description}</p>\n                                </CardText>\n                                <CardText >\n                                    <p className=\"cardText\">Availability:\n                                    <br />\n                                        {Object.entries(this.state.helpPosts[index].availability).map((day, i) => (\n                                            <div key={i}>\n                                                { day[1] ? <span>{day[0]}</span> : null}\n                                            </div>))\n                                        }</p>\n                                </CardText>\n                                <CardText >\n                                    <p className=\"cardText\">Instances: {this.state.helpPosts[index].instances}/{this.state.helpPosts[index].instances}</p>\n                                </CardText>\n                                <CardText>\n                                    <p className=\"cardText\">Posted on:\n                                    {this.state.helpPosts[index].createdAt}</p>\n                                </CardText>\n                                <Row className=\"cardButtons\">\n                                    <Button className=\"requestHelpButton\">Request help from {this.state.helpPosts[index].user.username}</Button>\n                                </Row>\n\n                                <Row className=\"cardButtons\">\n                                    {this.props.isCurrentUser ?\n                                        <>\n                                            <Button\n                                                type=\"button\"\n                                                className=\"volunteerDeletePost\"\n                                                onClick={this.deletePost}>\n                                                Delete\n                                            </Button>\n\n                                            <Button\n                                                type=\"button\"\n                                                className=\"volunteerEditPost\"\n                                                onClick={this.openModal}>\n                                                Edit\n                                            </Button>\n                                        </> : <></>\n                                    }\n                                    {this.props.isCurrentUser ?\n                                        <></> : <></>}\n                                </Row>\n                            </Card>\n\n                            <Modal isOpen={this.state.openModal}>\n                                <EditHelpPost\n                                    userId={this.props.userId}\n                                    sessionToken={this.props.sessionToken}\n                                    helpId={this.state.helpId}\n                                    closeModal={this.closeModal}\n                                    fetchHelpPosts={this.fetchHelpPosts} />\n                            </Modal>\n\n                        </Container>\n                    ))\n                    ) : (\n                            <div>\n\n                            </div>\n                        )}\n                    <br />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ViewHelpPosts;",{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"109","line":2,"column":29,"nodeType":"107","messageId":"108","endLine":2,"endColumn":32},{"ruleId":"105","severity":1,"message":"110","line":2,"column":34,"nodeType":"107","messageId":"108","endLine":2,"endColumn":37},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"111","line":2,"column":15,"nodeType":"107","messageId":"108","endLine":2,"endColumn":24},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Row' is defined but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation"]