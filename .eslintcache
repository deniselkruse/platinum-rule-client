[{"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/index.tsx":"1","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/reportWebVitals.ts":"2","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/App.tsx":"3","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Auth.tsx":"4","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Login.tsx":"5","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Register.tsx":"6","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Header.tsx":"7","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/DoorsImages.tsx":"8","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Footer.tsx":"9","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Menu.tsx":"10","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/CreateRequestPost.tsx":"11","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/ViewRequestPosts.tsx":"12","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/HomePage.tsx":"13","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/EditRequestPost.tsx":"14","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/EditVolunteerPost.tsx":"15","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/CreateVolunteerPost.tsx":"16","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/ViewVolunteerPosts.tsx":"17","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/About.tsx":"18"},{"size":548,"mtime":1612016095498,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":1607786181612,"results":"21","hashOfConfig":"20"},{"size":2668,"mtime":1612305940253,"results":"22","hashOfConfig":"20"},{"size":3266,"mtime":1612305591532,"results":"23","hashOfConfig":"20"},{"size":2506,"mtime":1612305991042,"results":"24","hashOfConfig":"20"},{"size":3844,"mtime":1612305620629,"results":"25","hashOfConfig":"20"},{"size":3319,"mtime":1612305333158,"results":"26","hashOfConfig":"20"},{"size":2570,"mtime":1612045927438,"results":"27","hashOfConfig":"20"},{"size":392,"mtime":1612064955468,"results":"28","hashOfConfig":"20"},{"size":3232,"mtime":1612239983751,"results":"29","hashOfConfig":"20"},{"size":8886,"mtime":1612239941061,"results":"30","hashOfConfig":"20"},{"size":7451,"mtime":1612232739591,"results":"31","hashOfConfig":"20"},{"size":1172,"mtime":1612305571239,"results":"32","hashOfConfig":"20"},{"size":11013,"mtime":1612231170843,"results":"33","hashOfConfig":"20"},{"size":10909,"mtime":1612231182324,"results":"34","hashOfConfig":"20"},{"size":8892,"mtime":1612231177996,"results":"35","hashOfConfig":"20"},{"size":7263,"mtime":1612232694866,"results":"36","hashOfConfig":"20"},{"size":3275,"mtime":1612239096503,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"ivhg93",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/index.tsx",[],["84","85"],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/reportWebVitals.ts",[],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/App.tsx",["86"],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Auth.tsx",["87"],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Login.tsx",["88"],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/auth/Register.tsx",["89"],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Header.tsx",["90"],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/DoorsImages.tsx",["91"],"import React, { Component } from 'react';\nimport { UncontrolledCarousel } from 'reactstrap';\n\nimport doors1 from '../../assets/doors1.jpg';\nimport doors2 from '../../assets/doors2.jpg';\nimport doors3 from '../../assets/doors3.jpg';\nimport doors4 from '../../assets/doors4.jpg';\nimport doors5 from '../../assets/doors5.jpg';\nimport doors6 from '../../assets/doors6.jpg';\nimport doors7 from '../../assets/doors7.jpg';\nimport doors8 from '../../assets/doors8.jpg';\nimport doors9 from '../../assets/doors9.jpg';\nimport doors10 from '../../assets/doors10.jpg';\n\nclass DoorsImages extends React.Component {\n\n    render() {\n        const items = [\n            {\n                src: `${doors1}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors2}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors3}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors4}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors5}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors6}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors7}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors8}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors9}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            },\n            {\n                src: `${doors10}`,\n                altText: '',\n                className: 'doors',\n                width: '100%'\n            }\n        ]\n        return (\n            <div>\n                <UncontrolledCarousel\n                    items={items}\n                    indicators={false}\n                    autoPlay={true}\n                    controls={false}\n                    interval={3000}\n                />\n            </div>\n        )\n    }\n}\n\nexport default DoorsImages;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Footer.tsx",[],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/Menu.tsx",["92"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Button, Card, Col } from 'reactstrap';\n\nimport CreateHelpPost from '../volunteers/CreateVolunteerPost';\nimport CreateRequestPost from '../recipients/CreateRequestPost';\nimport ViewHelpPosts from '../volunteers/ViewVolunteerPosts';\nimport ViewRequestPosts from '../recipients/ViewRequestPosts';\n\nimport About from './About';\n\nimport houses from '../../assets/houses.gif';\n\ntype postProps = {\n  sessionToken?: any;\n  fetchHelpPosts: any;\n  userId: any;\n}\n\nclass Menu extends React.Component<postProps, {}> {\n  constructor(props: postProps) {\n    super(props);\n    this.state = {\n    }\n  }\n\n  componentDidMount() {\n    if (!this.props.sessionToken) {\n      return <Redirect to=\"/\" />\n    } else {\n      return <Redirect to=\"/menu\" />\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n\n\n            <Route exact path='/menu'>\n              <br />\n              <Col>\n                <Card className=\"menuCard\">\n                  <br />\n                  <h3 className=\"menuHeader\" id=\"volunteerHeader\">Volunteer to Help</h3>\n                  <br />\n                  <Button href='/menu/request/posts' className=\"volunteerButton\">View Help Requests</Button>\n                  <br />\n                  <Button href='/menu/volunteer/create' className=\"volunteerButton\">Create a Volunteer Post</Button>\n                  <br />\n                </Card>\n                <br />\n                <Card className=\"menuCard\">\n                  <br />\n                  <h3 className=\"menuHeader\" id=\"recipientHeader\">Request Help</h3>\n                  <br />\n                  <Button href='/menu/volunteer/posts' className=\"recipientButton\">View Volunteer Posts</Button>\n                  <br />\n                  <Button href='/menu/request/create' className=\"recipientButton\">Create a Help Request</Button>\n                  <br />\n                </Card>\n\n                <img src={houses} alt=\"loading...\" className=\"houses\" />\n                <br />\n              </Col>\n            </Route>\n\n\n            <Route path='/menu/volunteer/create'>\n              <CreateHelpPost\n                sessionToken={this.props.sessionToken}\n                userId={this.props.userId} />\n            </Route>\n\n            <Route path='/menu/volunteer/posts'>\n              <ViewHelpPosts\n                sessionToken={this.props.sessionToken}\n                userId={this.props.userId} />\n            </Route>\n\n            <Route path='/menu/request/create'>\n              <CreateRequestPost\n                sessionToken={this.props.sessionToken}\n                userId={this.props.userId} />\n            </Route>\n\n            <Route path='/menu/request/posts'>\n              <ViewRequestPosts\n                sessionToken={this.props.sessionToken}\n                userId={this.props.userId} />\n            </Route>\n\n\n            <Route path='/menu/about'>\n              <About\n                sessionToken={this.props.sessionToken} />\n            </Route>\n\n          </Switch>\n        </Router>\n      </div>\n\n    )\n  }\n}\n\nexport default Menu;\n","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/CreateRequestPost.tsx",["93"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Card, CardHeader, Container, Form, FormGroup, Input, Label, Row } from 'reactstrap';\n\ntype RequestProps = {\n    sessionToken?: any;\n    userId: any;\n}\n\nexport type Weekdays = \"Sundays\" | \"Mondays\" | \"Tuesdays\" | \"Wednesdays\" | \"Thursdays\" | \"Fridays\" | \"Saturdays\"\n\nexport type NewAvail = Record<Weekdays, boolean> // Type of object with keys drawn from weekdays and value of boolean\n\ntype RequestState = {\n    title: string;\n    description: string;\n    availability: NewAvail;\n    instances: number;\n    date: any;\n    inactiveDate: any;\n    setTitle: (e: any) => void;\n    setDescription: (e: any) => void;\n    setAvailability: (e: any) => void;\n    setInstances: (e: any) => void;\n    setDate: (e: any) => void;\n    setInactiveDate: (e: any) => void;\n}\n\nclass CreateRequestPost extends React.Component<RequestProps, RequestState> {\n    constructor(props: RequestProps) {\n        super(props)\n        this.state = {\n            title: \"\",\n            description: \"\",\n            instances: 0,\n            date: \" \",\n            inactiveDate: \" \",\n            setTitle: (e) => {\n                this.setState({\n                    title: e\n                })\n            },\n            setDescription: (e) => {\n                this.setState({\n                    description: e\n                })\n            },\n            setAvailability: (e) => {\n                this.setState({\n                    availability: e\n                })\n            },\n            setInstances: (e) => {\n                this.setState({\n                    instances: e\n                })\n            },\n            setDate: (e) => {\n                this.setState({\n                    date: e\n                })\n            },\n            setInactiveDate: (e) => {\n                this.setState({\n                    inactiveDate: e\n                })\n            },\n            availability: {\n                Sundays: false,\n                Mondays: false,\n                Tuesdays: false,\n                Wednesdays: false,\n                Thursdays: false,\n                Fridays: false,\n                Saturdays: false\n            },\n        }\n        this.updateAvailability = this.updateAvailability.bind(this)\n    }\n\n    updateAvailability(newAvail: NewAvail) {\n        this.setState({\n            availability: {\n                ...this.state.availability,\n                ...newAvail\n            }\n        })\n    }\n\n\n    handleSubmit = (event: any) => {\n        event.preventDefault();\n        fetch(`http://localhost:3000/recipient/create`, {\n            method: 'POST',\n            body: JSON.stringify({\n                recipient: {\n                    title: this.state.title,\n                    description: this.state.description,\n                    availability: this.state.availability,\n                    instances: this.state.instances,\n                    date: this.state.date, //Fix date format\n                    inactiveDate: this.state.inactiveDate,\n                }\n            }),\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data);\n                this.state.setTitle('');\n                this.state.setDescription('');\n                this.state.setAvailability('');\n                this.state.setInstances('');\n                this.state.setDate('');\n                this.state.setInactiveDate('');\n            })\n    }\n\n    componentDidMount() {\n        if (!this.props.sessionToken) {\n            return <Redirect to=\"/\" />\n        } else {\n            return <Redirect to=\"/request/create\" />\n        }\n    }\n\n\n    render() {\n        return (\n            <Container className=\"postContainer\">\n                <Card body inverse\n                    style={{\n                        backgroundColor: '#96A7AA',\n                        borderColor: '#646F71',\n                        borderWidth: '.25em'\n                    }}>\n                    <CardHeader\n                        style={{\n                            backgroundColor: '#646F71'\n                        }}>\n                        <h4 className=\"postHeader\">\n                            What do you need help with?\n                        </h4>\n                    </CardHeader>\n                    <br />\n                    <Form className='postForm' onSubmit={this.handleSubmit}>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"helpTitle\"\n                                className=\"helpTitle\">\n                                <p className=\"cardText\">Please select a task:</p>\n                            </Label>\n                            <Input\n                                className=\"helpTitle\"\n                                type=\"select\"\n                                onChange={(e) => { this.state.setTitle(e.target.value) }}\n                                value={this.state.title}>\n                                <option value=\"\">Select One</option>\n                                <option value=\"Raking Leaves\">Raking Leaves</option>\n                                <option value=\"Shoveling Snow\">Shoveling Snow</option>\n                                <option value=\"Taking Out Trash\">Taking Out Trash</option>\n                                <option value=\"Mowing a Lawn\">Mowing a Lawn</option>\n                                <option value=\"Walking Dogs\">Walking Dog/s</option>\n                                <option value=\"A Grocery Run\">A Grocery Run</option>\n                                <option value=\"A Pharmacy Pickup\">A Pharmacy Pickup</option>\n                                <option value=\"An Essential Errand\">An Essential Errand</option>\n                                <option value=\"Phone Check-ins\">Phone Check-ins</option>\n                                <option value=\"Other\">Other - Please list in description.</option>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"description\"\n                                className=\"helpDescription\">\n                                <p className=\"cardText\">Description:</p>\n                            </Label>\n                            <Input\n                                className=\"helpDescription\"\n                                type=\"textarea\"\n                                onChange={(e) => { this.state.setDescription(e.target.value) }}\n                                value={this.state.description}>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"availability\"\n                                className=\"availability\">\n                                <p className=\"cardText\">Availability:</p>\n                            </Label>\n                            <br />\n                            <Row> \n                            {Object.entries(this.state.availability).map(([day, value], i: number) => (\n                                <li className=\"availabilityList\">\n                                    <Input type=\"checkbox\" key={i}\n                                        checked={value}\n                                        // @ts-ignore\n                                        onChange={() => this.updateAvailability({ [day]: !value })}\n                                    // value={value}\n                                    />\n                                    {day}\n                                </li>\n                            ))\n                            }\n                            </Row>\n                        </FormGroup>\n                        <FormGroup>\n                            <Row className=\"instancesRow\">\n                                <Label\n                                    htmlFor=\"instances\">\n                                    <p className=\"cardText\">Instances:</p>\n                                </Label>\n                                <Input\n                                    id=\"instances\"\n                                    onChange={(e) => { this.state.setInstances(e.target.value) }}\n                                    value={this.state.instances} />\n                            </Row>\n                        </FormGroup>\n                        <Button type=\"submit\" className=\"recipientSubmitButton\">Submit Post</Button>\n                    </Form>\n                </Card>\n            </Container>\n        )\n    }\n}\n\nexport default CreateRequestPost;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/ViewRequestPosts.tsx",["94"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Card, CardHeader, CardText, Container, Modal, Row } from 'reactstrap';\n\nimport EditRequestPost from '../recipients/EditRequestPost';\n\ntype ViewRequestPostsProps = {\n    sessionToken?: any;\n    userId: any;\n}\n\ntype ViewRequestPostsState = {\n    requestPosts: any;\n    recipientId: number;\n    modal: boolean;\n    openModal: boolean;\n    updateActive: boolean;\n    setUpdateActive: (e: any) => void;\n}\n\nclass ViewRequestPosts extends React.Component<ViewRequestPostsProps, ViewRequestPostsState> {\n    constructor(props: ViewRequestPostsProps) {\n        super(props)\n        this.state = {\n            requestPosts: [],\n            recipientId: 0,\n            modal: false,\n            openModal: false,\n            updateActive: false,\n            setUpdateActive: (e) => {\n                this.setState({\n                    updateActive: e\n                })\n            }\n        };\n        this.fetchRequestPosts = this.fetchRequestPosts.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchRequestPosts();\n        if (!this.props.sessionToken) {\n            return <Redirect to=\"/\" />\n        } else {\n            return <Redirect to=\"/menu\" />\n        }\n    }\n\n    setRequestPosts = (postArray: any) => {\n        console.log(\"postArray: \", postArray)\n        this.setState({ requestPosts: postArray })\n    }\n\n    fetchRequestPosts = () => {\n        fetch(`http://localhost:3000/recipient`, {\n            method: 'GET',\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then(response => response.json())\n            .then((data) => {\n                this.setRequestPosts(data)\n            })\n    }\n\n\n\n    deletePost = (event: any) => {\n        fetch(`http://localhost:3000/recipient/${this.state.recipientId}`, {\n            method: 'DELETE',\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then(response => response.json());\n        console.log('Post successfully deleted.');\n        this.fetchRequestPosts();\n    }\n\n    openModal = () => {\n        this.setState({ openModal: true })\n    }\n\n    closeModal = () => {\n        this.setState({ openModal: false })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"viewPostsHeader\">\n                    <h4 className=\"viewRequestHeader\">\n                        Find Neighbors</h4>\n                    <h4 className=\"viewRequestHeader\">\n                        to Help</h4>\n                </div>\n                <div>\n                    {this.state.requestPosts.length > 0 ? (this.state.requestPosts.map((event: any, index: any) => (\n\n                        <Container key={this.state.requestPosts.id} className=\"serviceCard\">\n\n                            <Card\n                                onMouseEnter={e => {\n                                    this.setState({\n                                        recipientId: event.id\n                                    })\n                                    console.log(this.state.recipientId)\n                                }}\n                                body inverse style={{\n                                    backgroundColor: '#AA9996',\n                                    borderColor: '#716664',\n                                    borderWidth: '.25em'\n                                }}>\n\n                                <CardHeader\n                                    style={{\n                                        backgroundColor: '#716664'\n                                    }}>\n                                    <p className=\"cardText\">Your neighbor</p>\n                                    <p className=\"cardUsername\">{event.user.username}</p>\n                                    <p className=\"cardText\"> needs help with</p>\n                                    <p className=\"cardHelpType\">{event.title}</p>\n                                </CardHeader>\n                                <br />\n                                <CardText>\n                                    <p className=\"cardText\">Description: </p>\n                                    <p className=\"cardText\">{event.description}</p>\n                                </CardText>\n                                <CardText >\n                                    <p className=\"cardText\">Availability:\n                                    <br />\n                                        {Object.entries(event.availability).map((day, i) => (\n                                            <div key={i}>\n                                                { day[1] ? <span>{day[0]}</span> : null}\n                                            </div>))\n                                        }</p>\n                                </CardText>\n                                <CardText >\n                                    <p className=\"cardText\">Instances: {event.instances}/{event.instances}</p>\n                                </CardText>\n                                <CardText>\n                                    {/* <p className=\"cardText\">Posted on:\n                                    {this.state.requestPosts[index].createdAt}</p> */}\n                                </CardText>\n                                <Row className=\"cardButtons\">\n                                    <Button className=\"volunteerHelpButton\">Volunteer to help {event.user.username}</Button>\n                                </Row>\n\n                                {(event.userId === this.props.userId) ?\n                                    <Row className=\"cardButtons\">\n                                        <Button\n                                            type=\"button\"\n                                            className=\"recipientDeletePost\"\n                                            onClick={this.deletePost}>\n                                            Delete\n                                            </Button>\n                                        <Button\n                                            type=\"button\"\n                                            className=\"recipientEditPost\"\n                                            onClick={this.openModal}>\n                                            Edit\n                                            </Button>\n                                    </Row>\n                                    : <></>}\n                            </Card>\n\n                            <Modal isOpen={this.state.openModal}>\n                                <EditRequestPost\n                                    userId={this.props.userId}\n                                    sessionToken={this.props.sessionToken}\n                                    recipientId={this.state.recipientId}\n                                    closeModal={this.closeModal}\n                                    fetchRequestPosts={this.fetchRequestPosts} />\n                            </Modal>\n\n                        </Container>\n                    ))\n                    ) : (\n                        <div>\n\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ViewRequestPosts;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/HomePage.tsx",["95"],"/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/recipients/EditRequestPost.tsx",["96"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Card, CardHeader, Container, Form, FormGroup, Input, Label, Modal, ModalBody, Row } from 'reactstrap';\n\ntype EditRequestProps = {\n    sessionToken?: any;\n    recipientId: number;\n    userId: any;\n    closeModal: () => void;\n    fetchRequestPosts: () => void;\n}\n\nexport type Weekdays = \"Sundays\" | \"Mondays\" | \"Tuesdays\" | \"Wednesdays\" | \"Thursdays\" | \"Fridays\" | \"Saturdays\"\n\nexport type NewAvail = Record<Weekdays, boolean>\n\ntype EditRequestState = {\n    title: string;\n    description: string;\n    availability: NewAvail;\n    instances: number;\n    date: any;\n    inactiveDate: any;\n    setTitle: (e: any) => void;\n    setDescription: (e: any) => void;\n    setAvailability: (e: any) => void;\n    setInstances: (e: any) => void;\n    setDate: (e: any) => void;\n    setInactiveDate: (e: any) => void;\n    modal: boolean,\n    updateActive: boolean;\n    setUpdateActive: (e: any) => void;\n}\n\n\nclass EditRequestPost extends React.Component<EditRequestProps, EditRequestState> {\n    constructor(props: EditRequestProps) {\n        super(props);\n        this.state = {\n            modal: false,\n            updateActive: false,\n            setUpdateActive: (e) => {\n                this.setState({\n                    updateActive: e\n                })\n            },\n            title: \"\",\n            description: \"\",\n            availability: {\n                Sundays: false,\n                Mondays: false,\n                Tuesdays: false,\n                Wednesdays: false,\n                Thursdays: false,\n                Fridays: false,\n                Saturdays: false\n            },\n            instances: 0,\n            date: \" \",\n            inactiveDate: \" \",\n            setTitle: (e) => {\n                this.setState({\n                    title: e\n                })\n            },\n            setDescription: (e) => {\n                this.setState({\n                    description: e\n                })\n            },\n            setAvailability: (e) => {\n                this.setState({\n                    availability: e\n                })\n            },\n            setInstances: (e) => {\n                this.setState({\n                    instances: e\n                })\n            },\n            setDate: (e) => {\n                this.setState({\n                    date: e\n                })\n            },\n            setInactiveDate: (e) => {\n                this.setState({\n                    inactiveDate: e\n                })\n            },\n        }\n        this.updateAvailability = this.updateAvailability.bind(this)\n    }\n\n    updateAvailability(newAvail: NewAvail) {\n        this.setState({\n            availability: {\n                ...this.state.availability,\n                ...newAvail\n            }\n        })\n    }\n\n    handleSubmit = (event: any) => {\n        event.preventDefault();\n        fetch(`http://localhost:3000/recipient/${this.props.recipientId}`, {\n            method: 'PUT',\n            body: JSON.stringify({\n                recipient: {\n                    title: this.state.title,\n                    description: this.state.description,\n                    availability: this.state.availability,\n                    instances: this.state.instances,\n                    date: this.state.date, // Fix date formatting\n                    inactiveDate: this.state.inactiveDate,\n                }\n            }),\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then((response) => {\n                if (response.status === 200) {\n                    console.log('Update successful.');\n                    this.state.setUpdateActive(true);\n                    console.log(response);\n                } else {\n                    console.log('Update failed.')\n                }\n                return response.json();\n            }).then((data) => {\n                console.log(data);\n                this.props.closeModal();\n                this.props.fetchRequestPosts();\n            })\n    };\n\n    componentDidMount() {\n        if (!this.props.sessionToken) {\n            return <Redirect to=\"/menu\" />\n        } else {\n            return <Redirect to=\"/request/posts\" />\n        }\n    }\n\n    render() {\n\n        return (\n            <Modal isOpen={true}>\n                <ModalBody>\n                    <Container className=\"postContainer\">\n                        <Card\n                            body inverse style={{\n                                backgroundColor: '#96A7AA',\n                                borderColor: '#646F71',\n                                borderWidth: '.25em'\n                            }}>\n                            <CardHeader\n                                style={{\n                                    backgroundColor: '#646F71'\n                                }}>\n                                <h4 className=\"postHeader\">\n                                    Update Your Help Request\n                                </h4>\n                            </CardHeader>\n                            <br />\n                            <Form className='postForm' onSubmit={this.handleSubmit} >\n                                <FormGroup>\n                                    <Label\n                                        htmlFor=\"helpTitle\"\n                                        className=\"helpTitle\">\n                                        <p className=\"cardText\">Please select a task:</p>\n                                    </Label>\n                                    <Input\n                                        className=\"helpTitle\"\n                                        type=\"select\"\n                                        onChange={(e) => { this.state.setTitle(e.target.value) }}\n                                        value={this.state.title}>\n                                        <option value=\"\">Select One</option>\n                                        <option value=\"Raking Leaves\">Raking Leaves</option>\n                                        <option value=\"Shoveling Snow\">Shoveling Snow</option>\n                                        <option value=\"Taking Out Trash\">Taking Out Trash</option>\n                                        <option value=\"Mowing a Lawn\">Mowing a Lawn</option>\n                                        <option value=\"Walking Dogs\">Walking Dog/s</option>\n                                        <option value=\"A Grocery Run\">A Grocery Run</option>\n                                        <option value=\"A Pharmacy Pickup\">A Pharmacy Pickup</option>\n                                        <option value=\"An Essential Errand\">An Essential Errand</option>\n                                        <option value=\"Phone Check-ins\">Phone Check-ins</option>\n                                        <option value=\"Other\">Other - Please list in description.</option>\n                                    </Input>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label\n                                        htmlFor=\"description\"\n                                        className=\"helpDescription\">\n                                        <p className=\"cardText\">Description:</p>\n                                    </Label>\n                                    <Input\n                                        className=\"helpDescription\"\n                                        type=\"textarea\"\n                                        onChange={(e) => { this.state.setDescription(e.target.value) }}\n                                        value={this.state.description}>\n                                    </Input>\n                                </FormGroup>\n                                <FormGroup>\n\n                                    <Label\n                                        htmlFor=\"availability\"\n                                        className=\"availability\">\n                                        <p className=\"cardText\">Availability:</p>\n                                    </Label>\n                                    <br />\n                                    <Row>\n                                        {Object.entries(this.state.availability).map(([day, value], i: number) => (\n                                            <li className=\"availabilityList\">\n                                                <Input type=\"checkbox\" key={i}\n                                                    checked={value}\n                                                    // @ts-ignore\n                                                    onChange={() => this.updateAvailability({ [day]: !value })}\n                                                // value={value}\n                                                />\n                                                {day}\n                                            </li>\n                                        ))\n                                        }\n                                    </Row>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Row className=\"instancesRow\">\n                                        <Label\n                                            htmlFor=\"instances\">\n                                            <p className=\"cardText\">Instances:</p>\n                                        </Label>\n                                        <Input\n                                            id=\"instances\"\n                                            onChange={(e) => { this.state.setInstances(e.target.value) }}\n                                            value={this.state.instances} />\n                                    </Row>\n                                </FormGroup>\n\n                                <Container>\n                                    <Row className=\"updateButtons\">\n                                        <Button\n                                            type=\"button\"\n                                            onClick={this.props.closeModal}\n                                            id=\"recipientCancelButton\">\n                                            Cancel\n                                        </Button>\n                                        <Button\n                                            type=\"submit\"\n                                            id=\"recipientUpdateButton\">\n                                            Update\n                                        </Button>\n                                    </Row>\n                                </Container>\n                            </Form>\n                        </Card>\n                    </Container>\n                </ModalBody>\n            </Modal>\n        );\n    }\n}\n\n\nexport default EditRequestPost;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/EditVolunteerPost.tsx",["97"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Card, CardHeader, Container, Form, FormGroup, Input, Label, Modal, ModalBody, Row } from 'reactstrap';\n\ntype EditVolunteerProps = {\n    sessionToken?: any;\n    userId: any;\n    helpId: any;\n    closeModal: () => void;\n    fetchHelpPosts: () => void;\n}\n\nexport type Weekdays = \"Sundays\" | \"Mondays\" | \"Tuesdays\" | \"Wednesdays\" | \"Thursdays\" | \"Fridays\" | \"Saturdays\"\n\nexport type NewAvail = Record<Weekdays, boolean>\n\ntype EditVolunteerState = {\n    title: string;\n    description: string;\n    availability: NewAvail;\n    instances: number;\n    date: any;\n    inactiveDate: any;\n    setTitle: (e: any) => void;\n    setDescription: (e: any) => void;\n    setAvailability: (e: any) => void;\n    setInstances: (e: any) => void;\n    setDate: (e: any) => void;\n    setInactiveDate: (e: any) => void;\n    modal: boolean,\n    updateActive: boolean;\n    setUpdateActive: (e: any) => void;\n}\n\nclass EditVolunteerPost extends React.Component<EditVolunteerProps, EditVolunteerState> {\n    constructor(props: EditVolunteerProps) {\n        super(props);\n        this.state = {\n            modal: false,\n            updateActive: false,\n            setUpdateActive: (e) => {\n                this.setState({\n                    updateActive: e\n                })\n            },\n            title: \"\",\n            description: \"\",\n            availability: {\n                Sundays: false,\n                Mondays: false,\n                Tuesdays: false,\n                Wednesdays: false,\n                Thursdays: false,\n                Fridays: false,\n                Saturdays: false\n            },\n            instances: 0,\n            date: \" \",\n            inactiveDate: \" \",\n            setTitle: (e) => {\n                this.setState({\n                    title: e\n                })\n            },\n            setDescription: (e) => {\n                this.setState({\n                    description: e\n                })\n            },\n            setAvailability: (e) => {\n                this.setState({\n                    availability: e\n                })\n            },\n            setInstances: (e) => {\n                this.setState({\n                    instances: e\n                })\n            },\n            setDate: (e) => {\n                this.setState({\n                    date: e\n                })\n            },\n            setInactiveDate: (e) => {\n                this.setState({\n                    inactiveDate: e\n                })\n            },\n        }\n        this.updateAvailability = this.updateAvailability.bind(this)\n    }\n\n\n    updateAvailability(newAvail: NewAvail) {\n        this.setState({\n            availability: {\n                ...this.state.availability,\n                ...newAvail\n            }\n        })\n    }\n\n    handleSubmit = (event: any) => {\n        event.preventDefault();\n        fetch(`http://localhost:3000/help/${this.props.helpId}`, {\n            method: 'PUT',\n            body: JSON.stringify({\n                help: {\n                    title: this.state.title,\n                    description: this.state.description,\n                    availability: this.state.availability,\n                    instances: this.state.instances,\n                    date: this.state.date, // Fix date formatting\n                    inactiveDate: this.state.inactiveDate,\n                }\n            }),\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then((response) => {\n                if (response.status === 200) {\n                    console.log('Update successful.');\n                    this.state.setUpdateActive(true);\n                    console.log(response);\n                } else {\n                    console.log('Update failed.')\n                }\n                return response.json();\n            }).then((data) => {\n                console.log(data);\n                this.props.closeModal();\n                this.props.fetchHelpPosts();\n            })\n    };\n\n    componentDidMount() {\n        if (!this.props.sessionToken) {\n            return <Redirect to=\"/menu\" />\n        } else {\n            return <Redirect to=\"/volunteer/posts\" />\n        }\n    }\n\n\n    render() {\n        return (\n\n            <Modal isOpen={true}>\n                <ModalBody>\n                    <Container className=\"postContainer\">\n                        <Card body inverse\n                            style={{\n                                backgroundColor: '#AA9996',\n                                borderColor: '#716664',\n                                borderWidth: '.25em'\n                            }}>\n                            <CardHeader\n                                style={{\n                                    backgroundColor: '#716664'\n                                }}>\n                                <h4 className=\"postHeader\">\n                                    Update Your Volunteer Post\n                                </h4>\n                            </CardHeader>\n                            <br />\n                            <Form className='postForm' onSubmit={this.handleSubmit}>\n                                <FormGroup>\n                                    <Label\n                                        htmlFor=\"helpTitle\"\n                                        className=\"helpTitle\">\n                                        <p className=\"cardText\">Please select a task:</p>\n                                    </Label>\n                                    <Input\n                                        className=\"helpTitle\"\n                                        type=\"select\"\n                                        onChange={(e) => { this.state.setTitle(e.target.value) }}\n                                        value={this.state.title}>\n                                <option value=\"\">Select One</option>\n                                <option value=\"Raking Leaves\">Raking Leaves</option>\n                                <option value=\"Shoveling Snow\">Shoveling Snow</option>\n                                <option value=\"Taking Out Trash\">Taking Out Trash</option>\n                                <option value=\"Mowing a Lawn\">Mowing a Lawn</option>\n                                <option value=\"Walking Dogs\">Walking Dog/s</option>\n                                <option value=\"A Grocery Run\">A Grocery Run</option>\n                                <option value=\"A Pharmacy Pickup\">A Pharmacy Pickup</option>\n                                <option value=\"An Essential Errand\">An Essential Errand</option>\n                                <option value=\"Phone Check-ins\">Phone Check-ins</option>\n                                <option value=\"Other\">Other - Please list in description.</option>\n                                    </Input>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label\n                                        htmlFor=\"description\"\n                                        className=\"helpDescription\">\n                                        <p className=\"cardText\">Description:</p>\n                                    </Label>\n                                    <Input\n                                        className=\"helpDescription\"\n                                        type=\"textarea\"\n                                        onChange={(e) => { this.state.setDescription(e.target.value) }}\n                                        value={this.state.description}>\n                                    </Input>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label\n                                        htmlFor=\"availability\"\n                                        className=\"availability\">\n                                        <p className=\"cardText\">Availability:</p>\n                                    </Label>\n                                    <br />\n                                    <Row>\n                                        {Object.entries(this.state.availability).map(([day, value], i: number) => (\n                                            <li className=\"availabilityList\">\n                                                <Input type=\"checkbox\" key={i}\n                                                    checked={value}\n                                                    // @ts-ignore\n                                                    onChange={() => this.updateAvailability({ [day]: !value })}\n                                                // value={value}\n                                                />\n                                                {day}\n                                            </li>\n                                        ))\n                                        }\n                                    </Row>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Row className=\"instancesRow\">\n                                        <Label\n                                            htmlFor=\"instances\">\n                                            <p className=\"cardText\">Instances:</p>\n                                        </Label>\n                                        <Input\n                                            id=\"instances\"\n                                            onChange={(e) => { this.state.setInstances(e.target.value) }}\n                                            value={this.state.instances} />\n                                    </Row>\n                                </FormGroup>\n\n                                <Container>\n                                    <Row className=\"updateButtons\">\n                                        <Button\n                                            type=\"button\"\n                                            onClick={this.props.closeModal}\n                                            id=\"volunteerCancelButton\">\n                                            Cancel\n                                        </Button>\n                                        <Button\n                                            type=\"submit\"\n                                            id=\"volunteerSubmitButton\">\n                                            Update\n                                    </Button>\n                                    </Row>\n                                </Container>\n                            </Form>\n                        </Card>\n                    </Container>\n                </ModalBody>\n            </Modal>\n        );\n    }\n}\n\n\nexport default EditVolunteerPost;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/CreateVolunteerPost.tsx",["98"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Card, CardHeader, Container, Form, FormGroup, Input, Label, Row } from 'reactstrap';\n\ntype VolunteerProps = {\n    sessionToken?: any;\n    userId: any;\n}\n\nexport type Weekdays = \"Sundays\" | \"Mondays\" | \"Tuesdays\" | \"Wednesdays\" | \"Thursdays\" | \"Fridays\" | \"Saturdays\"\n\nexport type NewAvail = Record<Weekdays, boolean> // Type of object with keys drawn from weekdays and value of boolean\n\ntype VolunteerState = {\n    title: string;\n    description: string;\n    availability: NewAvail;\n    instances: number;\n    date: any;\n    inactiveDate: any;\n    setTitle: (e: any) => void;\n    setDescription: (e: any) => void;\n    setAvailability: (e: any) => void;\n    setInstances: (e: any) => void;\n    setDate: (e: any) => void;\n    setInactiveDate: (e: any) => void;\n}\n\nclass CreateVolunteerPost extends React.Component<VolunteerProps, VolunteerState> {\n    constructor(props: VolunteerProps) {\n        super(props)\n        this.state = {\n            title: \"\",\n            description: \"\",\n            instances: 0,\n            date: \" \",\n            inactiveDate: \" \",\n            setTitle: (e) => {\n                this.setState({\n                    title: e\n                })\n            },\n            setDescription: (e) => {\n                this.setState({\n                    description: e\n                })\n            },\n            setAvailability: (e) => {\n                this.setState({\n                    availability: e\n                })\n            },\n            setInstances: (e) => {\n                this.setState({\n                    instances: e\n                })\n            },\n            setDate: (e) => {\n                this.setState({\n                    date: e\n                })\n            },\n            setInactiveDate: (e) => {\n                this.setState({\n                    inactiveDate: e\n                })\n            },\n            availability: {\n                Sundays: false,\n                Mondays: false,\n                Tuesdays: false,\n                Wednesdays: false,\n                Thursdays: false,\n                Fridays: false,\n                Saturdays: false\n            }\n        }\n        this.updateAvailability = this.updateAvailability.bind(this)\n    }\n\n    updateAvailability(newAvail: NewAvail) {\n        this.setState({\n            availability: {\n                ...this.state.availability,\n                ...newAvail\n            }\n        })\n    }\n\n    handleSubmit = (event: any) => {\n        event.preventDefault();\n        fetch(`http://localhost:3000/help/create`, {\n            method: 'POST',\n            body: JSON.stringify({\n                help: {\n                    title: this.state.title,\n                    description: this.state.description,\n                    availability: this.state.availability,\n                    instances: this.state.instances,\n                    date: this.state.date, // Fix date format\n                    inactiveDate: this.state.inactiveDate,\n                }\n            }),\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data);\n                this.state.setTitle('');\n                this.state.setDescription('');\n                this.state.setAvailability('');\n                this.state.setInstances('');\n                this.state.setInactiveDate('');\n            })\n    }\n\n    componentDidMount() {\n        if (!this.props.sessionToken) {\n            return <Redirect to=\"/menu\" />\n        } else {\n            return <Redirect to=\"/volunteer/create\" />\n        }\n    }\n\n    render() {\n        return (\n            <Container className=\"postContainer\">\n                <Card body inverse\n                    style={{\n                        backgroundColor: '#AA9996',\n                        borderColor: '#716664',\n                        borderWidth: '.25em'\n                    }}>\n                    <CardHeader\n                        style={{\n                            backgroundColor: '#716664'\n                        }}>\n                        <h4 className=\"postHeader\">\n                            How can you help?\n                        </h4>\n                    </CardHeader>\n                    <br />\n                    <Form className=\"postForm\" onSubmit={this.handleSubmit}>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"helpTitle\"\n                                className=\"helpTitle\">\n                                <p className=\"cardText\">Please select a task:</p>\n                            </Label>\n                            <Input\n                                className=\"helpTitle\"\n                                type=\"select\"\n                                onChange={(e) => { this.state.setTitle(e.target.value) }}\n                                value={this.state.title}>\n                                <option value=\"\">Select One</option>\n                                <option value=\"Raking Leaves\">Raking Leaves</option>\n                                <option value=\"Shoveling Snow\">Shoveling Snow</option>\n                                <option value=\"Taking Out Trash\">Taking Out Trash</option>\n                                <option value=\"Mowing a Lawn\">Mowing a Lawn</option>\n                                <option value=\"Walking Dogs\">Walking Dog/s</option>\n                                <option value=\"A Grocery Run\">A Grocery Run</option>\n                                <option value=\"A Pharmacy Pickup\">A Pharmacy Pickup</option>\n                                <option value=\"An Essential Errand\">An Essential Errand</option>\n                                <option value=\"Phone Check-ins\">Phone Check-ins</option>\n                                <option value=\"Other\">Other - Please list in description.</option>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"description\"\n                                className=\"helpDescription\">\n                                <p className=\"cardText\">Description:</p>\n                            </Label>\n                            <Input\n                                className=\"helpDescription\"\n                                type=\"textarea\"\n                                onChange={(e) => { this.state.setDescription(e.target.value) }}\n                                value={this.state.description}>\n                            </Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label\n                                htmlFor=\"availability\"\n                                className=\"availability\">\n                                <p className=\"cardText\">Availability:</p>\n                            </Label>\n                            <br />\n                            <Row>\n                                {Object.entries(this.state.availability).map(([day, value], i: number) => (\n                                    <li className=\"availabilityList\">\n                                        <Input type=\"checkbox\" key={i}\n                                            checked={value}\n                                            // @ts-ignore\n                                            onChange={() => this.updateAvailability({ [day]: !value })}\n                                        // value={value}\n                                        />\n                                        {day}\n                                    </li>\n                                ))\n                                }\n                            </Row>\n                        </FormGroup>\n                        <FormGroup>\n                            <Row className=\"instancesRow\">\n                                <Label\n                                    htmlFor=\"instances\">\n                                    <p className=\"cardText\">Instances:</p>\n                                </Label>\n                                <Input\n                                    id=\"instances\"\n                                    onChange={(e) => { this.state.setInstances(e.target.value) }}\n                                    value={this.state.instances} />\n                            </Row>\n                        </FormGroup>\n                        <Button type=\"submit\" className=\"volunteerSubmitButton\">Submit Post</Button>\n                    </Form>\n                </Card>\n            </Container>\n        );\n    }\n}\n\nexport default CreateVolunteerPost;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/volunteers/ViewVolunteerPosts.tsx",["99"],"import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Card, CardHeader, CardText, Container, Modal, Row } from 'reactstrap';\n\nimport EditHelpPost from './EditVolunteerPost';\n\ntype ViewHelpPostsProps = {\n    sessionToken?: any;\n    userId: any;\n}\n\ntype ViewHelpPostsState = {\n    helpPosts: any;\n    helpId: number;\n    modal: boolean;\n    openModal: boolean;\n    updateActive: boolean;\n    setUpdateActive: (e: any) => void;\n}\n\nclass ViewHelpPosts extends React.Component<ViewHelpPostsProps, ViewHelpPostsState> {\n    constructor(props: ViewHelpPostsProps) {\n        super(props)\n        this.state = {\n            helpPosts: [],\n            helpId: 0,\n            modal: false,\n            openModal: false,\n            updateActive: false,\n            setUpdateActive: (e) => {\n                this.setState({\n                    updateActive: e\n                })\n            },\n        };\n        this.fetchHelpPosts = this.fetchHelpPosts.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchHelpPosts();\n        if (!this.props.sessionToken) {\n            return <Redirect to=\"/\" />\n        } else {\n            return <Redirect to=\"/menu\" />\n        }\n    }\n\n    setHelpPosts = (postArray: any) => {\n        console.log(\"postArray: \", postArray)\n        this.setState({ helpPosts: postArray })\n    }\n\n    fetchHelpPosts = () => {\n        fetch(`http://localhost:3000/help`, {\n            method: 'GET',\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then(response => response.json())\n            .then((data) => {\n                this.setHelpPosts(data)\n            })\n    }\n\n    deletePost = (event: any) => {\n        fetch(`http://localhost:3000/help/${this.state.helpId}`, {\n            method: 'DELETE',\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': this.props.sessionToken\n            })\n        })\n            .then(response => response.json());\n        console.log('Post successfully deleted.');\n        this.fetchHelpPosts();\n    }\n\n    openModal = () => {\n        this.setState({ openModal: true })\n    }\n\n    closeModal = () => {\n        this.setState({ openModal: false })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"viewPostsHeader\">\n                    <h4 className=\"viewVolunteerHeader\">Find Volunteers</h4>\n                </div>\n\n                <div>\n                    {this.state.helpPosts.length > 0 ? (this.state.helpPosts.map((event: any, index: any) => (\n\n                        <Container key={this.state.helpPosts.id} className=\"serviceCard\">\n\n                            <Card\n                                onMouseEnter={e => {\n                                    this.setState({\n                                        helpId: event.id\n                                    })\n                                    console.log(this.state.helpId)\n                                }}\n                                body inverse\n                                style={{\n                                    backgroundColor: '#96A7AA',\n                                    borderColor: '#646F71',\n                                    borderWidth: '.25em'\n                                }}>\n\n                                <CardHeader\n                                    style={{\n                                        backgroundColor: '#646F71'\n                                    }}>\n                                    <p className=\"cardText\">Your neighbor</p>\n                                    <p className=\"cardUsername\">{event.user.username}</p>\n                                    <p className=\"cardText\">is available to help with</p>\n                                    <p className=\"cardHelpType\">{event.title}</p>\n                                </CardHeader>\n                                <br />\n                                <CardText>\n                                    <p className=\"cardText\">Description:</p>\n                                    <p className=\"cardText\">{event.description}</p>\n                                </CardText>\n                                <CardText >\n                                    <p className=\"cardText\">Availability:\n                                    <br />\n                                        {Object.entries(event.availability).map((day, i) => (\n                                            <div key={i}>\n                                                { day[1] ? <span>{day[0]}</span> : null}\n                                            </div>))\n                                        }</p>\n                                </CardText>\n                                <CardText >\n                                    <p className=\"cardText\">Instances: {event.instances}/{event.instances}</p>\n                                </CardText>\n                                <CardText>\n                                    {/* <p className=\"cardText\">Posted on:\n                                    {this.state.helpPosts[index].createdAt}</p> */}\n                                </CardText>\n                                <Row className=\"cardButtons\">\n                                    <Button className=\"requestHelpButton\">Request help from {event.user.username}</Button>\n                                </Row>\n                                {(event.userId === this.props.userId) ?\n                                    <Row className=\"cardButtons\">\n                                        <Button\n                                            type=\"button\"\n                                            className=\"volunteerDeletePost\"\n                                            onClick={this.deletePost}>\n                                            Delete\n                                        </Button>\n                                        <Button\n                                            type=\"button\"\n                                            className=\"volunteerEditPost\"\n                                            onClick={this.openModal}>\n                                            Edit\n                                        </Button>\n                                    </Row>\n                                    : <></>}\n                            </Card>\n\n                            <Modal isOpen={this.state.openModal}>\n                                <EditHelpPost\n                                    userId={this.props.userId}\n                                    sessionToken={this.props.sessionToken}\n                                    helpId={this.state.helpId}\n                                    closeModal={this.closeModal}\n                                    fetchHelpPosts={this.fetchHelpPosts} />\n                            </Modal>\n\n                        </Container>\n                    ))\n                    ) : (\n                        <div>\n\n                        </div>\n                    )}\n                    <br />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ViewHelpPosts;","/Users/Denise/Desktop/ElevenFiftyProjects/RedBadge/Projects/PlatinumRule/platinum-rule-client/src/components/home/About.tsx",["100"],"import React, { Component } from 'react';\nimport { Container, Row } from 'reactstrap';\n\ntype AboutProps = {\n    sessionToken?: any;\n}\n\nclass About extends React.Component<AboutProps, {}> {\n\n    render() {\n        return (\n            <div className=\"aboutPage\">\n                <Container id=\"about\">\n                    <Row>\n                        <div className=\"col-lg-8 mx-auto\">\n                            <h2 id=\"aboutHeader\">About</h2>\n                            <p className=\"lead\">We've all heard of the Golden Rule, which goes something like this: Do unto others as you would have them do to you. Because all people and situations are different, The Platinum Rule extends the principal of acts of kindness and goodwill by treating others as they want to be treated.  </p>\n                            <p className=\"lead\">The idea behind The Platinum Rule application was born during the early days of the Covid-19 global pandemic. Due to the communicability of Covid-19, daily activities may present a challenge for neighbors at higher risk. However, often the people that need help rarely ask for it. At the same time, the people who often offer to help, are rarely taken up on it. </p>\n                            <p className=\"lead\">The Platinum Rule allows neighbors who need help with daily tasks to find someone nearby who can help while encouraging volunteer-minded neighbors to offer their time and services.</p>\n                            <p className=\"lead\">The Platinum Rule is a full-stack web application built using PostgreSQL, Express, React, and Node.js (PERN) that enables users to post and search for neighbors in need of help and volunteer availability.</p>\n                        </div>\n                    </Row>\n                </Container>\n                <Container id=\"mission\" className=\"bg-light\">\n                    <Row>\n                        <div className=\"col-lg-8 mx-auto\">\n                            <h2 id=\"aboutHeader\">Mission Statement</h2>\n                            <p className=\"lead\" id=\"missionText\">Our mission is to facilitate a friendly environment to support and encourage neighbors helping neighbors.</p>\n                        </div>\n                    </Row>\n                </Container>\n                <Container id=\"userStories\">\n                    <Row>\n                        <div className=\"col-lg-8 mx-auto\">\n                            <h2 id=\"aboutHeader\">User Stories</h2>\n                            <h5>Volunteers</h5>\n                            <p className=\"lead\">As a volunteer, users may post their availability to help with specific tasks such as running an essential errand or walking a neighbor’s dog. Volunteers may also view posts from neighbors who are seeking help with tasks and offer their assistance. </p>\n                            <h5>Recipients</h5>\n                            <p className=\"lead\">As a recipient, users may post their help requests for specific tasks such as phone check-ins or picking up groceries. Recipients may also view posts from neighbors available to help and claim help from those volunteers.</p>\n                        </div>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default About;",{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"106","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]